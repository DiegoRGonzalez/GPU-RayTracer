#version 410 // -*- c++ -*-
#include <g3dmath.glsl>
#include <Texture/Texture.glsl>

// Input arguments from the C++ program
uniform mat4x3         cameraToWorldMatrix;

uniform TextureCube    environmentMap;

uniform float          tanHalfFieldOfViewY;
uniform float          projectionMatrix22, projectionMatrix23;

// Output to the App::m_framebuffer
out Color3 pixelColor;


struct sphere{

    Point3 C;
    float r;
    Radiance3 color;

};

struct plane{
    Point3 C;
    Vector3 n;
    Radiance3 color;
};

struct taurus{
    Point3 C;
    float r;
    float R;
    Radiance3 color;

};

struct surfel{
    Point3 position;
    Radiance3 color;
    Vector3 normal;

};


struct cube{
    Point3 C;
    Vector3 b;
    Radiance3 color;


};

struct cylinder{
    Point3 C;
    float r;
    float e;
    Radiance3 color;

};

float opSub(float subtraction, float main){
    return max(main, -subtraction);
}

float opAdd(float addition, float main){
    return min(addition, main);
}

float eDistance(cylinder c, Point3 X) {
    Vector2 d = abs(Vector2(length(X.xz - c.C.xz), X.y - c.C.y)) - Vector2(c.r, c.e);
    return min(maxComponent(d), 0) + length(max(d, Vector2(0, 0)));
}
      

float eDistance(cube c, Point3 X) {
    Vector3 d = abs(X - c.C) - c.b;
    return min(maxComponent(d), 0) + length(max(d, Vector3(0, 0, 0)));
}

float eDistance(cube c, float r, Point3 X) {
  return length(max(abs(X - c.C) - c.b, Vector3(0, 0, 0))) - r;
}
      
      

float eDistance(sphere s, Point3 X){
    return length(X - s.C) - s.r;
}

float eDistance(plane p, Point3 X){
     return dot(X - p.C, p.n);
}


float eDistance(taurus t, Point3 X) {
    return length(vec2(length(X.xz - t.C.xz) - t.r, X.y - t.C.y)) - t.R;
}

//float cutCircle(inout float distance, Point3 p, float circleR, float sphereR float circlePoints){
//
//    for(int i = 0; i < circlePoints; ++i ){
//        float theta = (2*pi/circlePoints) * i;
//        float x = p.x + circleR*cos(theta);
//        float z = p.z + circleR*sin(theta);
//        sphere sphere1 = sphere(Point3(x, p.y, z), sphereR, Radiance3(1,1,1));
//        distance = opSub(eDistance(sphere1, X), d2);
//    
//    }
//
//    return distance;
//}


//float cutPanel(Point3())

float subFourSides(float dBox, cube panel, Point3 X){
    dBox = opSub(eDistance(panel, X), dBox);
    panel.C.z -= 40;
    dBox = opSub(eDistance(panel, X), dBox);

    //Swap dimensions
    float z = panel.C.x;
    float x = panel.C.z;
    panel.C.z = z;
    panel.C.x = x;
    z = panel.b.x;
    x = panel.b.z;
    panel.b.x = x;
    panel.b.z = z;

    dBox = opSub(eDistance(panel, X), dBox);
    panel.C.x += 40;
    return opSub(eDistance(panel, X), dBox);
}

float addFourSides(float dBox, cube panel, Point3 X, bool bump){
    dBox = opAdd(eDistance(panel, X), dBox);
    if(bump)
    panel.C.z +=2;

    panel.C.z -= 40;
    dBox = opAdd(eDistance(panel, X), dBox);

    //Swap dimensions
    float z = panel.C.x;
    float x = panel.C.z;
    panel.C.z = z;
    panel.C.x = x;
    z = panel.b.x;
    x = panel.b.z;
    panel.b.x = x;
    panel.b.z = z;

    dBox = opAdd(eDistance(panel, X), dBox);
    
    if(bump)
    panel.C.x -= 2;
    panel.C.x += 40;
    return opAdd(eDistance(panel, X), dBox);
}

float addFourSides(float dBox, cube panel, Point3 X){
    return addFourSides(dBox, panel, X, false);
}
float makeTardis(float dTardis, inout float dWindow, Point3 X){
     //Subtract first panel
    cube panel = cube(Point3(-10, 75.5, 20), Vector3(8, 9, 0.5), Radiance3(1,1,1) );
    dTardis = subFourSides(dTardis, panel, X);

    
    //Make white windows on top
    cube w1 = panel;
    w1.C.z -= 1;
    dWindow = eDistance(w1, X);
    dWindow = addFourSides(dWindow, w1, X, true);
    w1.C.x += 20;
    dWindow = addFourSides(dWindow, w1, X, true);

    

    //Make first window frame
    Point3 frameCenter = panel.C;
    frameCenter.x -= 2.75;
    frameCenter.z -= 0;//;0.25;
    cube frame1 = cube(frameCenter, Vector3(0.5, 9, 0.1), Radiance3(0,0,0));
    dTardis = addFourSides(dTardis, frame1, X);
    frame1.C.x += 5.5;
    dTardis = addFourSides(dTardis, frame1, X);

    cube frame2 = panel;
    frame2.C.z -= 0;
    frame2.b = Vector3(panel.b.x, 0.5, 0.1);
    dTardis = addFourSides(dTardis, frame2, X);

    //Make other window panel
    panel.C.x += 20;
    dTardis = subFourSides(dTardis, panel, X);

    //make second window frame
    frame1.C.x += 20;
    dTardis = addFourSides(dTardis, frame1, X);
    frame1.C.x -= 5.5;
    dTardis = addFourSides(dTardis, frame1, X);
    frame2.C.x += 20;
    dTardis = addFourSides(dTardis, frame2, X);


    //make remaining panels
    panel.C.y -= 20;
    dTardis = subFourSides(dTardis, panel, X);
    panel.C.y -= 20;
    dTardis = subFourSides(dTardis, panel, X);
    panel.C.y -= 20;
    dTardis = subFourSides(dTardis, panel, X);
    panel.C.x -= 20;
    dTardis = subFourSides(dTardis, panel, X);
    panel.C.y += 20;
    dTardis = subFourSides(dTardis, panel, X);
    panel.C.y += 20;
    dTardis = subFourSides(dTardis, panel, X);


    return dTardis;

}

float sceneDistance(Point3 X, inout Radiance3 color) {
    Radiance3 tardisBlue = Radiance3(0.06, 0.14, 0.65);
    cube cube1 = cube(Point3(0,0,0), Vector3(25, 3, 25), tardisBlue);
    cube cube2 = cube(Point3(0,3,0), Vector3(20, 85, 20), tardisBlue);
    cube cube3 = cube(Point3(0,88,0), Vector3(19, 5, 19), tardisBlue);
    cube cube4 = cube(Point3(0,93,0), Vector3(15, 3, 15), tardisBlue);
    cylinder light = cylinder(Point3(0,96,0), 2, 3, Radiance3(1,1,1));
    sphere lightS = sphere(Point3(0,99,0), 2, Radiance3(1,1,1));

    float d1 = eDistance(cube1, X);
    float d2 = eDistance(cube2, X);
    float d3 = eDistance(cube3, X);
    float d4 = eDistance(cube4, X);
    float d5 = eDistance(light, X);
    d5 = opAdd(eDistance(lightS, X), d5);
    float dWindow;
    Radiance3 windowColor = Radiance3(1,1,1);
    d2 = makeTardis(d2, dWindow, X);



    float minDistance = inf;
    Radiance3 minColor;
    const int numObjects = 6;
    float distance[numObjects] = float[]( d1, d2, d3, d4, d5,dWindow);



    Radiance3 colors[numObjects] = Radiance3[](cube1.color, cube2.color, cube3.color, cube4.color, light.color, windowColor);
    for(int i = 0; i < numObjects; ++i){
        if(distance[i] <= minDistance && distance[i] > 0){
            minDistance = distance[i];
            minColor = colors[i];
        }
    
    }
    
    
    color = minColor;
    return minDistance;

}

float sceneDistance(Point3 X){
    Radiance3 ignoreColor = Radiance3(0,0,0);
    return sceneDistance(X, ignoreColor);
}



float rayPlaneIntersect(Point3 P, Vector3 w, Point3 C, Vector3 n) {
    const float eps           = 0.005;
   // Nearly parallel?
    float denom = dot(n, w);
    if (abs(denom) <= eps) { return inf; }
    if(denom > 0) {return inf; }
    float t = dot(C - P, n) / denom;
    return (t >= 0) ? t : inf;
}



bool traceRay(Point3 P, Vector3 w, inout Radiance3 color, inout surfel s, float closeEnough) {
    const int   maxIterations = 100;
    const float eps           = 0.005;
    const float maxDistance   = 1e5;
    float curMaxDistance = maxDistance;
    float intersectDist1 = inf;
    float intersectDist2 = inf;

    plane ground = plane(Point3(0,0,0), Vector3(0,1,0), Radiance3(1,0.5,0.5));
    float groundDist = rayPlaneIntersect(P, w, ground.C, ground.n);
    if(groundDist < curMaxDistance){
        curMaxDistance = groundDist;
        s.position = P + w * groundDist;
        s.color = ground.color;
        s.normal = ground.n;
    
    }

    float t = 0;
    color = Radiance3(1,0,0);
    for (int i = 0; (i < maxIterations) && (t < curMaxDistance); ++i) {
        float dt = sceneDistance(P + w * t, color);
        t += max(dt, closeEnough);
        if (dt < 2.0*closeEnough) {
            curMaxDistance = t;
            s.position = P + w * t;
            Point3 Q = s.position - w*2.0*closeEnough;
            s.normal = normalize(Vector3(
                sceneDistance(Q + Vector3(eps, 0, 0)), 
                sceneDistance(Q + Vector3(0, eps, 0)), 
                sceneDistance(Q + Vector3(0, 0, eps))) - Vector3(sceneDistance(Q)));
            s.color = color;

        }
    }

    if(curMaxDistance < maxDistance){
        return true; 
    }

    color =  sampleTexture(environmentMap, w).rgb;
    return false;

}

Radiance3 ro(Vector3 eye, surfel s){
    return s.color/pi;
}

Radiance3 shade(surfel s, Vector3 eyeDirection, float closeEnough){

    Vector3 w_i = normalize(Vector3(0,2,-0.5));
    float B_i = 1.5;


    // Scale ambient color by ambient visibility and material
    Radiance3 ambientColor = Radiance3(0.5,0.5,0.5);
    Radiance3 pixelColor = ambientColor * (s.color);
    Radiance3 ignoreColor;
    surfel ignoreSurfel;
    
        if (!traceRay(s.position + (normalize(s.normal) * (10.0*closeEnough)), w_i, ignoreColor, ignoreSurfel, closeEnough )) {
            pixelColor += ( B_i * ro(eyeDirection, s) * dot(s.normal, -eyeDirection));
            
        }
    //pixelColor = s.normal;
    return pixelColor;
}

float clamp(float x, float low, float high){
    return min(max(x,low), high);
}



void main() {
    // Generate an eye ray in camera space, and then transform to world space

    // Primary ray origin    
    Point3 P  = cameraToWorldMatrix[3];

    // Primary ray direction
    Vector3 w = Matrix3(cameraToWorldMatrix) * 
        normalize(Vector3((gl_FragCoord.xy - g3d_FragCoordExtent / 2.0) * Vector2(1, -1),
                          g3d_FragCoordExtent.y / ( -2.0 * tanHalfFieldOfViewY)));

    float maxDist = inf;       

    //////////////////////////////////////

    // Render the scene here
    surfel surfel;
    const float closeEnough   = 8e-3;
    if(traceRay(P, w, pixelColor, surfel, closeEnough)){
        pixelColor = shade(surfel, w, closeEnough);
    }

    //if(analyticIntersect())
    
    
    //////////////////////////////////////
     
    // Camera space z value
    float csZ = maxDist / w.z;
    
    // Pack into standard OpenGL depth buffer format to make the result compatible
    // with rasterization and post-processing.
    gl_FragDepth = (maxDist == inf) ? 1.0 : ((projectionMatrix22 * csZ + projectionMatrix23) / -csZ);
}

